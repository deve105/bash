## Genomics
### Aims
 - gene catalogue
 - reference platform: functional and variation analyses
 - biodiversity and ecosystem (metagenomics)
### Variation
 - larger genomes - more repetitive DNA
 - Eukaryotes - diploid (heterozygosity)
### Gene Density
 - Human 12-15 genesmB
 - Animas mtDNA -14 genes in 14kb (1000 genes/mb)
### NGS
- sequencing by synthesis (Illumina)
- single molecule real time (SMRT)
- indexing - barcode
- bridge amplification - cluster growth
- illumina - Stargazing
- PacBio or nanopore- Long reads in realtime - high error
### Data structure
- FASTA: starts with >, header
fna, ffn, fasta/fas, faa, fq/fastq (quality files with PHRED quality scores)
- Quality scores -log 10 (error probability)
10 - 1 in 10 - 90% accuracy
20 - 1 in 100 - 99% 
30 - 1 in 1000 - 99.9% accoracy
- FASTQ files
@title
sequence line
+optional repeat title
quality line ASCII
- Nucleic acid codes
K G/T keto
M A/C amino
B G/T/C
V G/C/A (any)
S G/C (strong)
W A/T (weak)
D G/A/T
Y TC pyrimidine
R G/A purine
H A/C/T
"-" gap
- GFF: gene-finding format
describing genes and features
1 sequence
2 source
3 feature
4 start
5 end
6 score
7 strand
8 frame
9 attributes
- SAM: sequence alignment map
- BAM: binary version
11 mandatory fields in every row
1 Read name
2 bitwise flag
3 reference sequence
4 start position of read in reference
5 map quality
6 CIGAR string
7 paired end read reference
8 position of mate
9 distance between reads
10 read sequence
11 read quality

### Sequencing and Assembling
- Reads
- Contigs
- Supercontigs or scaffolds

NGS assemblers
k-mers using Bruijn Graphs (DBG)
* It has a problem with polimorfisms

### assesing assembly
- N50 measure of average contig size
- Depth of coverage
- Completeness of the gene catalogue

#### challenges for genome assembly
- heterozygosity
- paralogy vs allelism (duplication)
Ho do you tell a duplicated gene from alleles of a gene?
- Sequence complexity: sequence repeats or trasposable 

#### extrinsic challenges
- quality of DNA (errors)
- length of DNA sequence reads (the longer the better)
- coverage: depth of coverage
- memory intensive
- software

### Genome annotation and function
- function of genes can predict with prokka




- Secure Shell: (SSH) communication method between computers.
- From windows is more difficult to connect to a server. (Putty is an option)
- Transfering files: cyberduck, filezilla, winscp, scp


## Specific editor
- nano: https://wiki.gentoo.org/wiki/Nano/Basics_Guide

A FASTQ file normally uses four lines per sequence.

- Line 1 begins with a '@' character and is followed by a series of information that uniquely identifies each read.

@HWI-ST1097:127:C0W5VACXX:5:1101:4820:2124 1:N:0:CTCAGA
@SRR534005.299 HWI-ST945:93:c02g4acxx:3:1101:16012:2225/1

- Line 2 is the raw sequence. The lenght of this sequence should correspond to the length of the read requested.

- Line 3 is always '+' for output from the Illumina.

- Line 4 is a string of Ascii-encoded base quality scores.


```{.bash}

efetch -db=nuccore -format=fasta -id=CM000046.1 > seqs/CM000046.1.fa

# Running trimmomatic in a loop
for R1 in *R1*
do
   R2=${R1//R1_001_small.fastq/R2_001_small.fastq}
   R1paired=${R1//.fastq/_paired.fastq.gz}
   R1unpaired=${R1//.fastq/_unpaired.fastq.gz}	
   R2paired=${R2//.fastq/_paired.fastq.gz}
   R2unpaired=${R2//.fastq/_unpaired.fastq.gz}	
   echo "java -jar $WORK/IntMolModule/STG/practiceData/Trimmomatic-0.36/trimmomatic-0.36.jar PE -threads 32 -phred33 $R1 $R2 $R1paired $R1unpaired $R2paired $R2unpaired" >> trimmomatic.cmds
done
cat trimmomatic.cmds
Cat  | xargs Rscript --vanilla pipeline.R 

#Read the sample from the command line
sranumber<-commandArgs(trailingOnly=TRUE) 
print(sranumber)
#Function Idk yet
execute<-function(x, outputfile=NA, intern=FALSE, quitOnError=FALSE){
  if(!is.na(outputfile) &&file.exists(outputfile)){
    cat("Output for step exists, skipping this step\n");
    invisible("")
  }
  cat("----", x, "\n"); res<-system(x, intern=intern); cat(">>>>", res[1], "\n")
  if(res[1] >=1){ 
    cat("Error external process did not finish\n\n");
    if(quitOnError) q("no")
  }
}

input.dir<-"/home/dev105/projects/rawdata"
input.base<-sranumber[1]
output.dir<-paste0("/home/dev105/projects/outputdata/", input.base,".aln")

#Create an output folder
if(!file.exists(input.dir)){ dir.create(input.dir, recursive=TRUE) }
if(!file.exists(output.dir)){ dir.create(output.dir, recursive=TRUE) }

#STEP 0 - SRA Download and Compress
setwd(input.dir)
execute(paste0(" -p", input.base)
execute(paste0("fasterq-dump -p --split-files ", input.base), paste0(input.base, "_1.fastq"))
execute(paste0("bgzip ", input.base, "_1.fastq"), paste0(input.base, "_1.fastq.gz"))
execute(paste0("bgzip ", input.base, "_2.fastq"), paste0(input.base, "_2.fastq.gz"))

#STEP 1 - READ Trimming
trim.files<-c(
                  paste0(input.dir, "/", input.base,"_1.fastq.gz"),
                  paste0(input.dir, "/", input.base,"_2.fastq.gz"),
                  paste0(output.dir, "/", input.base,"_1.P.fastq.gz"),
                  paste0(output.dir, "/", input.base,"_1.U.fastq.gz"),
                  paste0(output.dir, "/", input.base,"_2.P.fastq.gz"),
                  paste0(output.dir, "/", input.base,"_2.U.fastq.gz")
                )
trim.path<-"/home/dev105/devapps/Trimmomatic-0.39"
trim.exec<-paste0("java -jar ", trim.path, "/trimmomatic-0.39.jar")
trim.opts<-paste0("ILLUMINACLIP:",trim.path,"/adapters/TruSeq3-PE-2.fa:2:30:10")
trim.opts<-paste0(trim.opts, "LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36")
trim.cmd<-paste0(trim.exec, "PE ", paste0(trim.files, collapse=""), "", trim.opts)

execute(trim.cmd, trim.files[3])

q("no")
```